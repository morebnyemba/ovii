volumes:
  postgres_data:
  static_volume:
  media_volume:
  certbot_data:
  certbot_webroot:

services:
  # --- Backend Services ---
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}

  redis:
    image: redis:7-alpine

  backend:
    build:
      context: ./ovii_backend
    command: daphne -b 0.0.0.0 -p 8000 ovii_backend.asgi:application
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    env_file:
      - ./.env
    environment:
      - DB_HOST=db
      - DB_PORT=5432
      - REDIS_HOST=redis
    depends_on:
      - db
      - redis

  celery_worker:
    build:
      context: ./ovii_backend
    command: celery -A ovii_backend worker -l info
    env_file:
      - ./.env
    depends_on:
      - db
      - redis

  celery_beat:
    build:
      context: ./ovii_backend
    command: celery -A ovii_backend beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./.env
    depends_on:
      - db
      - redis
  
  # --- Frontend Service ---
  frontend:
    build:
      context: ./ovii-frontend
      args:
        # This URL points to the dedicated API subdomain.
        - NEXT_PUBLIC_WEBSOCKET_URL=wss://api.ovii.it.com/ws/wallet/
    depends_on:
      - backend

  # --- Nginx Reverse Proxy ---
  nginx:
    build:
      context: ./nginx
    volumes:
      - ./nginx/options-ssl-nginx.conf:/etc/letsencrypt/options-ssl-nginx.conf:ro
      - ./nginx/ssl-dhparams.pem:/etc/letsencrypt/ssl-dhparams.pem:ro
      - certbot_data:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    ports:
      - "80:80"
      - "443:443"
    # This command starts Nginx and sets up a loop to reload it every 12 hours.
    # This is necessary to apply renewed SSL certificates from Certbot.
    command: /bin/sh -c "while :; do sleep 12h & wait $${!}; nginx -s reload; done & nginx -g 'daemon off;'"
    depends_on:
      - backend
      - frontend

  certbot:
    image: certbot/certbot
    volumes:
      - certbot_data:/etc/letsencrypt
      - certbot_webroot:/var/www/certbot
