version: "3.8"

volumes:
  postgres_data:
  static_volume:
  logs_volume:
  media_volume:
  celery_beat_schedule:

services:
  # --- Backend Services ---
  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  backend:
    build:
      context: ./ovii_backend
    image: ovii_backend_image # Name the image after building
    command: daphne -b 0.0.0.0 -p 8000 ovii_backend.asgi:application
    volumes:
      - static_volume:/home/app/web/staticfiles
      - logs_volume:/home/app/web/logs
      - media_volume:/home/app/web/mediafiles
      # Mount the code for development; remove for production if code is baked into the image
      - ./ovii_backend:/home/app/web 
    env_file:
      - ./.env
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"] # A simple healthcheck endpoint should be created
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  migrate:
    image: ovii_backend_image # Reuse the built image
    command: python manage.py migrate
    env_file:
      - ./.env
    restart: on-failure
    depends_on:
      db:
        condition: service_healthy

  celery_worker:
    image: ovii_backend_image # Reuse the built image
    command: celery -A ovii_backend worker -l info
    env_file:
      - ./.env
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  celery_beat:
    image: ovii_backend_image # Reuse the built image
    command: >
      sh -c "rm -f /home/app/web/celerybeat.pid && 
             celery -A ovii_backend beat -l info 
             --scheduler django_celery_beat.schedulers:DatabaseScheduler 
             --pidfile=/home/app/web/celerybeat.pid"
    volumes:
      - celery_beat_schedule:/home/app/web # Persist schedule file
    env_file:
      - ./.env
    restart: unless-stopped
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
  
  # --- Frontend Service ---
  frontend:
    build:
      context: ./ovii-frontend
      dockerfile: Dockerfile # Explicitly name the Dockerfile
      args:
        # This URL points to the dedicated API subdomain.
        - NEXT_PUBLIC_WEBSOCKET_URL=ws://api.ovii.it.com/ws/wallet/
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy

  # --- Nginx Reverse Proxy ---
  nginx:
    build:
      context: ./nginx
    volumes:
      - static_volume:/home/app/web/staticfiles
      - media_volume:/home/app/web/mediafiles
    ports:
      - "80:80"
    restart: unless-stopped
    command: nginx -g 'daemon off;'
    depends_on:
      - backend
      - frontend
