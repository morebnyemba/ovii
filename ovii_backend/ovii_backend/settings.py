"""
Django settings for ovii_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent
AUTH_USER_MODEL = 'users.OviiUser'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-x1hv@le&dft+59o624lfp24h(h*c@zc-rv$o53#o3a9@^pc8_#'
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Load environment variables from .env file
import os
from dotenv import load_dotenv
load_dotenv()

SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", SECRET_KEY)
DEBUG = os.environ.get("DJANGO_DEBUG", DEBUG) == "True"

# Application definition

DJANGO_APPS = [
    # The adminlte3 theme must be before django.contrib.admin
    'adminlte3',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

THIRD_PARTY_APPS = [
    'rest_framework',           # For building REST APIs
    'rest_framework_simplejwt', # For JWT authentication
    'channels',                 # For WebSocket support
    'phonenumber_field',        # For phone number validation and storage
    'corsheaders',              # For handling Cross-Origin Resource Sharing
]

LOCAL_APPS = [
    'users.apps.UsersConfig',     # Custom user app
    'wallets.apps.WalletsConfig', # Wallet and Transaction app
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware', # Must be placed high up
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# CORS Configuration
FRONTEND_ORIGIN = os.environ.get("FRONTEND_ORIGIN", "http://localhost:3000")
CORS_ALLOWED_ORIGINS = [FRONTEND_ORIGIN]

if FRONTEND_ORIGIN != "http://localhost:3000":  # For development with vite
    CORS_ALLOWED_ORIGINS.append("http://localhost:3000")


ROOT_URLCONF = 'ovii_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ovii_backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.environ.get("DATABASE_ENGINE", 'django.db.backends.sqlite3'),
        'NAME': os.environ.get("DATABASE_NAME", BASE_DIR / 'db.sqlite3'),
    }
}

if DATABASES['default']['ENGINE'] != 'django.db.backends.sqlite3':
    DATABASES['default']['USER'] = os.environ.get("DATABASE_USER")
    DATABASES['default']['PASSWORD'] = os.environ.get("DATABASE_PASSWORD")


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')



# Media files (User-uploaded content)
# https://docs.djangoproject.com/en/5.1/howto/static-files/#serving-files-uploaded-by-a-user-during-development
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '1000/day', # Default for anonymous users
        'user': '1000/day', # Default for authenticated users
        'otp.request': '5/hour' # Custom rate for OTP requests
    }
}

# ASGI application definition
# This tells Django to use Channels' ASGI application as the entry point.
ASGI_APPLICATION = 'ovii_backend.asgi.application'

# Channel layer configuration
# This configuration now uses Redis as the backend, which is suitable for production
# and allows Celery workers to communicate with the Channels layer.
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [(os.environ.get("REDIS_HOST", "127.0.0.1"), 6379)]},
    },
}

# Celery Configuration
# This tells Celery to use Redis as the message broker and result backend.
redis_host = os.environ.get("REDIS_HOST", "127.0.0.1")
CELERY_BROKER_URL = f'redis://{redis_host}:6379/0'
CELERY_RESULT_BACKEND = f'redis://{redis_host}:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'UTC'

# Logging Configuration
# This setup creates a specific logger for OTPs to print them to the console.
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'users.otp': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Custom Application Settings
from decimal import Decimal

# Daily transaction limits based on user's KYC verification level.
# These integer keys correspond to the VerificationLevels enum in users/models.py
TRANSACTION_LIMITS = {
    0: Decimal('0.00'),      # Unverified (LEVEL_0)
    1: Decimal('100.00'),    # Mobile Verified (LEVEL_1)
    2: Decimal('1000.00'),   # Identity Verified (LEVEL_2)
    3: Decimal('10000.00'),  # Address Verified (LEVEL_3)
}
