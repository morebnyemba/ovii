"""
Django settings for ovii_backend project.

Generated by 'django-admin startproject' using Django 5.1.7.
"""

from pathlib import Path
import os
from dotenv import load_dotenv

# ------------------------------------------------------------------
# 1. PATH / ENV
# ------------------------------------------------------------------
BASE_DIR = Path(__file__).resolve().parent.parent
load_dotenv()  # loads variables from .env

# ------------------------------------------------------------------
# 2. CORE SETTINGS
# ------------------------------------------------------------------
DEBUG = os.getenv("DJANGO_DEBUG", "True").lower() == "true"

SECRET_KEY = os.getenv("DJANGO_SECRET_KEY")
if not SECRET_KEY and DEBUG is False:
    raise ValueError("No DJANGO_SECRET_KEY set for production environment!")
elif not SECRET_KEY:
    SECRET_KEY = "django-insecure-x1hv@le&dft+59o624lfp24h(h*c@zc-rv$o53#o3a9@^pc8_#"

# ALLOWED_HOSTS should be a list of strings representing the host/domain names
# that this Django site can serve. This is a security measure to prevent
# HTTP Host header attacks.
ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS", "127.0.0.1,localhost").split(",")

# ------------------------------------------------------------------
# 3. APPS
# ------------------------------------------------------------------
DJANGO_APPS = [
    "daphne",
    "jazzmin",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
]

THIRD_PARTY_APPS = [
    "rest_framework",
    "rest_framework_simplejwt",
    "channels",
    "phonenumber_field",
    "django_celery_beat",
    "corsheaders",
]

LOCAL_APPS = [
    "users.apps.UsersConfig",
    "wallets.apps.WalletsConfig", # Ensure this points to the new AppConfig
    "agents.apps.AgentsConfig",
    "merchants.apps.MerchantsConfig",
    "integrations.apps.IntegrationsConfig",
    "notifications.apps.NotificationsConfig",
]

INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS

# ------------------------------------------------------------------
# 4. MIDDLEWARE  (order matters!)
# ------------------------------------------------------------------
MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "corsheaders.middleware.CorsMiddleware",      # must be high
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

# 5. CORS â€“ Next.js dev server
# ------------------------------------------------------------------
if DEBUG:
    CORS_ALLOWED_ORIGINS = [
        "http://localhost:3000",      # Next.js default
        "http://127.0.0.1:3000",      # common alias
    ]
else:
    # In production, you should restrict this to your frontend's domain
    # We provide a sensible default and allow it to be overridden.
    allowed_origins_str = os.getenv("CORS_ALLOWED_ORIGINS", "https://ovii.it.com")
    CORS_ALLOWED_ORIGINS = [origin.strip() for origin in allowed_origins_str.split(',') if origin.strip()]

# Allow cookies / Authorization header
CORS_ALLOW_CREDENTIALS = True

# In production, it's more secure to explicitly set the allowed origins
# rather than allowing all.
CORS_ALLOW_ALL_ORIGINS = False

# Make sure we allow the headers Next.js will send
from corsheaders.defaults import default_headers
CORS_ALLOW_HEADERS = list(default_headers) + [
    "authorization",
    "content-type",
    "x-csrftoken",
]

# ------------------------------------------------------------------
# 5.1. Production Security Settings
# ------------------------------------------------------------------
if not DEBUG:
    SECURE_SSL_REDIRECT = os.getenv("DJANGO_SECURE_SSL_REDIRECT", "True").lower() == "true"
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_HSTS_SECONDS = 31536000  # 1 year
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_BROWSER_XSS_FILTER = True
    # A list of trusted origins for unsafe requests (e.g. POST).
    # For 'https' schemes, the header must be a match.
    trusted_origins_str = os.getenv("CSRF_TRUSTED_ORIGINS", "https://ovii.it.com")
    CSRF_TRUSTED_ORIGINS = [origin.strip() for origin in trusted_origins_str.split(',') if origin.strip()]
    # This tells Django to trust the X-Forwarded-Proto header from our proxy (Nginx)
    # to determine if a request is secure. This is critical for CSRF checks.
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

    # Set cookie domain to allow sharing across subdomains (e.g., ovii.it.com and api.ovii.it.com)
    # The leading dot is important.
    SESSION_COOKIE_DOMAIN = ".ovii.it.com"
    CSRF_COOKIE_DOMAIN = ".ovii.it.com"

    # Tells the browser to send the CSRF cookie with cross-site API requests.
    CSRF_COOKIE_SAMESITE = 'None'

    # 'SameSite=None' requires the Secure flag, meaning your site MUST use HTTPS.
    CSRF_COOKIE_SECURE = True

    SESSION_COOKIE_SAMESITE = 'None'
    SESSION_COOKIE_SECURE = True



# ------------------------------------------------------------------
# 6. URL / WSGI / ASGI
# ------------------------------------------------------------------
ROOT_URLCONF = "ovii_backend.urls"
WSGI_APPLICATION = "ovii_backend.wsgi.application"
ASGI_APPLICATION = "ovii_backend.asgi.application"

# ------------------------------------------------------------------
# 7. DATABASE
# ------------------------------------------------------------------
DATABASES = {
    "default": {
        "ENGINE": os.getenv("DATABASE_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DATABASE_NAME", BASE_DIR.parent / "db.sqlite3"),
        "USER": os.getenv("DATABASE_USER", ""),
        "PASSWORD": os.getenv("DATABASE_PASSWORD", ""),
        "HOST": os.getenv("DATABASE_HOST", ""),
        "PORT": os.getenv("DATABASE_PORT", ""),
    }
}

# ------------------------------------------------------------------
# 8. AUTH & PASSWORD VALIDATION
# ------------------------------------------------------------------
AUTH_USER_MODEL = "users.OviiUser"

AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# ------------------------------------------------------------------
# 9. INTERNATIONALISATION
# ------------------------------------------------------------------
LANGUAGE_CODE = "en-us"
TIME_ZONE = "Africa/Harare"
USE_I18N = True
USE_TZ = True

# ------------------------------------------------------------------
# 10. STATIC & MEDIA
# ------------------------------------------------------------------
STATIC_URL = "/static/"
# This defines the directory where `collectstatic` will gather all static files.
# Using BASE_DIR makes it more portable, but your absolute path is also correct for a fixed deployment environment.
STATIC_ROOT = os.getenv("STATIC_ROOT", BASE_DIR / "staticfiles")
STATICFILES_DIRS = [BASE_DIR / "static"]

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR.parent / "mediafiles"

# ------------------------------------------------------------------
# 11. TEMPLATES
# ------------------------------------------------------------------
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

# ------------------------------------------------------------------
# 12. REST FRAMEWORK
# ------------------------------------------------------------------
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": "1000/day",
        "user": "1000/day",
        "otp.request": "5/hour",
    },
}

# ------------------------------------------------------------------
# 13. CHANNELS / CELERY / REDIS
# ------------------------------------------------------------------
redis_host = os.getenv("REDIS_HOST", "127.0.0.1")
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [(redis_host, 6379)]},
    },
}

CELERY_BROKER_URL = f"redis://{redis_host}:6379/0"
CELERY_RESULT_BACKEND = f"redis://{redis_host}:6379/0"
CELERY_ACCEPT_CONTENT = ["json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE

# ------------------------------------------------------------------
# 14. LOGGING
# ------------------------------------------------------------------
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        # Root logger: catches all logs that don't have a specific logger
        '': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        # Django's own loggers
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['console'],
            'level': 'WARNING', # To avoid logging every single request
            'propagate': False,
        },
        # Your specific app loggers
        'users': {
            'handlers': ['console'],
            'level': 'DEBUG' if DEBUG else 'INFO',
            'propagate': False,
        }
    },
}

# ------------------------------------------------------------------
# 15. TRANSACTION LIMITS
# ------------------------------------------------------------------
from decimal import Decimal
TRANSACTION_LIMITS = {
    0: Decimal("0.00"),
    1: Decimal("100.00"),
    2: Decimal("1000.00"),
    3: Decimal("10000.00"),
}

# ------------------------------------------------------------------
# 16. JAZZMIN ADMIN THEME
# ------------------------------------------------------------------
JAZZMIN_SETTINGS = {
    "site_title": "Ovii Admin",
    "site_header": "Ovii",
    "site_brand": "Ovii",
    "welcome_sign": "Welcome to the Ovii Admin Panel",
    "copyright": "Ovii Ltd. Powered by Slyker Tech Web Services",
    "icons": {
        "auth": "fas fa-users-cog",
        "auth.Group": "fas fa-users",
        "users.OviiUser": "fas fa-user-check",
        "users.KYCDocument": "fas fa-id-card",
        "users.OTPRequest": "fas fa-key",
        "wallets.Wallet": "fas fa-wallet",
        "wallets.Transaction": "fas fa-exchange-alt",
    },
    "custom_css": "admin/css/custom.css",
    "show_ui_builder": False,
    "order_with_respect_to": ["users", "wallets", "auth"],
}

JAZZMIN_UI_TWEAKS = {
    "navbar_fixed": True,
    "sidebar_fixed": True,
    "sidebar": "sidebar-dark-indigo",
    "navbar": "navbar-dark navbar-indigo",
    "sidebar_nav_flat_style": True,
}

# ------------------------------------------------------------------
# 17. SYSTEM ACCOUNTS
# ------------------------------------------------------------------
# Phone number of the system wallet used for holding funds during payouts.
SYSTEM_PAYOUT_WALLET_PHONE = os.getenv("SYSTEM_PAYOUT_WALLET_PHONE", "+10000000000")

# ------------------------------------------------------------------
# 18. PAYNOW INTEGRATION SETTINGS
# ------------------------------------------------------------------
PAYNOW_INTEGRATION_ID = os.getenv("PAYNOW_INTEGRATION_ID")
PAYNOW_INTEGRATION_KEY = os.getenv("PAYNOW_INTEGRATION_KEY")
PAYNOW_API_URL = os.getenv("PAYNOW_API_URL", "https://www.paynow.co.zw/interface")
# The URL on your server that Paynow will post status updates to.
PAYNOW_RESULT_URL = os.getenv("PAYNOW_RESULT_URL")
# The URL to redirect the user to after they complete payment on the Paynow page.
PAYNOW_RETURN_URL = os.getenv("PAYNOW_RETURN_URL")
